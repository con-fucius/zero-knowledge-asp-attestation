// This script deploys the Verifier and ASPRegistry contracts using Hardhat.
const hre = require("hardhat"); // Hardhat Runtime Environment
const fs = require('fs');
const path = require('path');

async function main() {
  // --- Pre-checks ---
  // Ensure the Verifier contract artifact exists (it's generated by ZK setup)
  const verifierContractPath = path.join(__dirname, "..", "contracts", "Verifier.sol");
  const verifierArtifactPath = path.join(__dirname, "..", "artifacts", "contracts", "Verifier.sol", "Verifier.json");

  if (!fs.existsSync(verifierContractPath)) {
    console.error(`\n❌ Error: Verifier contract source not found at ${verifierContractPath}`);
    console.error("   Run 'npm run setup:zk' first to generate it.");
    process.exit(1);
  }
   if (!fs.existsSync(verifierArtifactPath)) {
    console.error(`\n❌ Error: Verifier contract artifact not found at ${verifierArtifactPath}`);
    console.error("   Run 'npm run compile:contracts' first to compile it.");
    process.exit(1);
  }

  // Get the deployer account (first account from Hardhat network)
  const [deployer] = await hre.ethers.getSigners();
  console.log("Deploying contracts with the account:", deployer.address);
  const balance = await deployer.getBalance();
  console.log("Account balance:", hre.ethers.utils.formatEther(balance));

  // --- Deploy Verifier Contract ---
  console.log("\nDeploying Verifier contract...");
  const Verifier = await hre.ethers.getContractFactory("Verifier");
  const verifier = await Verifier.deploy();
  await verifier.deployed(); // Wait for deployment confirmation
  console.log("✅ Verifier deployed to address:", verifier.address);

  // --- Deploy ASPRegistry Contract ---
  console.log("\nDeploying ASPRegistry contract...");
  const ASPRegistry = await hre.ethers.getContractFactory("ASPRegistry");
  // Pass the deployed Verifier's address to the ASPRegistry constructor
  const aspRegistry = await ASPRegistry.deploy(verifier.address);
  await aspRegistry.deployed(); // Wait for deployment confirmation
  console.log("✅ ASPRegistry deployed to address:", aspRegistry.address);

  // --- Post-deployment Setup ---
  // Register the deployer address as an initial ASP for testing purposes
  console.log("\nRegistering deployer as an initial ASP:", deployer.address);
  try {
    const tx = await aspRegistry.registerASP(deployer.address);
    console.log("   Register ASP transaction sent:", tx.hash);
    await tx.wait(); // Wait for the transaction to be mined
    console.log("   ✅ ASP registered successfully.");
  } catch (error) {
     console.error("   ❌ Error registering initial ASP:", error);
     // Decide if this should halt the script or just warn
  }


  // --- Summary ---
  console.log("\n--- Deployment Summary ---");
  console.log("Network:", hre.network.name);
  console.log("Deployer Account:", deployer.address);
  console.log("Verifier Contract Address:", verifier.address);
  console.log("ASPRegistry Contract Address:", aspRegistry.address);
  console.log("--------------------------\n");
  console.log("➡️ ACTION REQUIRED: Copy the ASPRegistry Address above.");
  console.log("   Paste it into the 'REGISTRY_ADDRESS' constant in 'scripts/submit_attestation.js'.");
}

// Standard Hardhat pattern to handle errors
main().catch((error) => {
  console.error("❌ Deployment failed:", error);
  process.exitCode = 1; // Exit with a non-zero code to indicate failure
});