// Helper script to generate proofs using SnarkJS
// This script is designed to be called from the Python ASP service.
const snarkjs = require("snarkjs");
const fs = require("fs");
const path = require("path");
const { ZkUtils } = require("ffjavascript"); // For logging if needed

// --- Logger Setup ---
// SnarkJS can be verbose; use a simple logger.
// const logger = { info: console.log, debug: console.log, error: console.error };
const logger = null; // Set to null to disable snarkjs logging for cleaner output

async function run() {
    // --- Argument Parsing ---
    const args = process.argv.slice(2);
    if (args.length !== 5) {
        console.error("❌ Usage: node generate_proof.js <base_dir> <circuit_name> <input_json_path> <proof_json_path> <public_json_path>");
        process.exit(1);
    }
    const [baseDir, circuitName, inputJsonPath, proofJsonPath, publicJsonPath] = args;

    // --- Path Construction ---
    // Construct paths relative to the base directory provided as an argument
    const wasmPath = path.join(baseDir, "zk-out", `${circuitName}_js`, `${circuitName}.wasm`);
    const zkeyPath = path.join(baseDir, "zk-out", `${circuitName}_final.zkey`);

    // --- Pre-checks ---
    console.log(`\nGenerating proof for circuit: ${circuitName}`);
    console.log(` -> WASM path: ${wasmPath}`);
    console.log(` -> ZKey path: ${zkeyPath}`);
    console.log(` -> Input path: ${inputJsonPath}`);
    if (!fs.existsSync(wasmPath)) { console.error("❌ Error: WASM file not found!"); process.exit(1); }
    if (!fs.existsSync(zkeyPath)) { console.error("❌ Error: Final ZKey file not found! Run setup first."); process.exit(1); }
    if (!fs.existsSync(inputJsonPath)) { console.error("❌ Error: Input JSON file not found!"); process.exit(1); }

    // --- Proof Generation ---
    try {
        // Read the input data generated by the ASP service
        const inputData = JSON.parse(fs.readFileSync(inputJsonPath, "utf8"));
        console.log("   Read input data successfully.");

        // Generate the proof and public signals using snarkjs.groth16.fullProve
        console.log("   Generating Groth16 proof with SnarkJS...");
        const { proof, publicSignals } = await snarkjs.groth16.fullProve(
            inputData,
            wasmPath,
            zkeyPath,
            logger // Pass logger (or null)
        );
        console.log("   ✅ Proof generated successfully.");

        // --- Output ---
        // Save the generated proof object to the specified JSON file
        fs.writeFileSync(proofJsonPath, JSON.stringify(proof, null, 2));
        // Save the generated public signals array to the specified JSON file
        fs.writeFileSync(publicJsonPath, JSON.stringify(publicSignals, null, 2));

        console.log(`   -> Proof saved to: ${proofJsonPath}`);
        console.log(`   -> Public signals saved to: ${publicJsonPath}`);
        console.log("   (Public signals represent the public inputs: [root, knownBadLeafHash] in decimal format)");

    } catch (err) {
        console.error("❌ Error during proof generation:", err);
        process.exit(1); // Exit with error code if proof generation fails
    }
}

// Execute the main function
run();